/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#include <Functions/Meos/{{CLASS_NAME}}LogicalFunction.hpp>
#include <DataTypes/DataTypeProvider.hpp>
#include <DataTypes/DataType.hpp>
#include <DataTypes/Schema.hpp>
#include <Functions/LogicalFunction.hpp>
#include <Serialization/DataTypeSerializationUtil.hpp>
#include <Util/PlanRenderer.hpp>
#include <fmt/format.h>
#include <ErrorHandling.hpp>
#include <LogicalFunctionRegistry.hpp>
#include <SerializableVariantDescriptor.pb.h>
#include <string>
#include <string_view>
#include <utility>
#include <vector>

namespace NES {

{{CLASS_NAME}}LogicalFunction::{{CLASS_NAME}}LogicalFunction(
{{CONSTRUCTOR_PARAMS}}
) : dataType(DataTypeProvider::provideDataType(DataType::Type::{{NES_RETURN_TYPE}})) {
    parameters.reserve({{PARAM_COUNT}});
{{PARAMETER_PUSH_BACKS}}
}

DataType {{CLASS_NAME}}LogicalFunction::getDataType() const {
    return dataType;
}

LogicalFunction {{CLASS_NAME}}LogicalFunction::withDataType(const DataType& dataType) const {
    auto copy = *this;
    copy.dataType = dataType;
    return copy;
}

std::vector<LogicalFunction> {{CLASS_NAME}}LogicalFunction::getChildren() const {
    return parameters;
}

LogicalFunction {{CLASS_NAME}}LogicalFunction::withChildren(const std::vector<LogicalFunction>& children) const {
    PRECONDITION(children.size() == {{PARAM_COUNT}}, "{{CLASS_NAME}}LogicalFunction requires {{PARAM_COUNT}} children, but got {}", children.size());
    auto copy = *this;
    copy.parameters = children;
    return copy;
}

std::string_view {{CLASS_NAME}}LogicalFunction::getType() const {
    return NAME;
}

bool {{CLASS_NAME}}LogicalFunction::operator==(const LogicalFunctionConcept& rhs) const {
    if (const auto* other = dynamic_cast<const {{CLASS_NAME}}LogicalFunction*>(&rhs)) {
        return parameters == other->parameters;
    }
    return false;
}

std::string {{CLASS_NAME}}LogicalFunction::explain(ExplainVerbosity verbosity) const {
    std::string args;
    for (size_t i = 0; i < parameters.size(); ++i) {
        if (i > 0) args += ", ";
        args += parameters[i].explain(verbosity);
    }
    return fmt::format("{{UPPER_FUNCTION_NAME}}({})", args);
}

LogicalFunction {{CLASS_NAME}}LogicalFunction::withInferredDataType(const Schema& schema) const {
    std::vector<LogicalFunction> newChildren;
    for (auto& node : getChildren()) {
        newChildren.push_back(node.withInferredDataType(schema));
    }
    
{{TYPE_VALIDATION}}
        
    return this->withChildren(newChildren);
}

SerializableFunction {{CLASS_NAME}}LogicalFunction::serialize() const {
    SerializableFunction serializedFunction;
    serializedFunction.set_function_type(NAME);
    for (const auto& param : parameters) {
        serializedFunction.add_children()->CopyFrom(param.serialize());
    }
    DataTypeSerializationUtil::serializeDataType(this->getDataType(), serializedFunction.mutable_data_type());
    return serializedFunction;
}

LogicalFunctionRegistryReturnType LogicalFunctionGeneratedRegistrar::Register{{CLASS_NAME}}LogicalFunction(LogicalFunctionRegistryArguments arguments) {
    PRECONDITION(arguments.children.size() == {{PARAM_COUNT}}, "{{CLASS_NAME}}LogicalFunction requires {{PARAM_COUNT}} children, but got {}", arguments.children.size());
    return {{CLASS_NAME}}LogicalFunction({{REGISTRY_CONSTRUCTOR_ARGS}});
}

} // namespace NES